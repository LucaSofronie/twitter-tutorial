a dat hash la password

username: username -> username simplu

server -> web = response = newUser FARA parola lui pt. a nu fi compromisa

token = JWT ->  informatii despre client = wristband
cookie = a purta la mana wristband-ul

token -> cookie -> response

password === hash_password?
await bcrypt.compare(password, hash_password || '')
we used (|| '') in case the hash_password is undefined
if it is undefined the bcrypt will throw errors

cookie-ul il trimit la response, nu in pun in DB

user-ul practic cu acel cookie va umbla prin site-ul meu si va face chestiile pe care le vreau eu sa-i-le permit

token = bratara de identificare
cookie = purtatul bratarii

cum dau decode la token? 
encode : 
  token = jwt.sign(payload, process.env.JWT_SECRET);

decode :
  jwt.verify(token, process.env.JWT_SECRET);

decode == falsy value -> the token was altered = NO ACCESS

const user = await User.findById(decoded.userId).select("-password");

Ce face acest protectRoute middleware?
-dupa cum ii spune si numele protejeaza accesul interzis pe anumite parti ale site-ului
-request-ul are un token in el pe care il verific daca exista si dupa aceea ii dau decode cu jwt_secret pt a verifica ca nu a fost alterat.
-decode.userId are id-ul userului din MongoDB care incearca sa faca ceva pe site;
-in request adauga o sectie noua unde pun informatiile user-ului (fara parola) : User.findById(decoded.userId).select("-password");
- voi lua ce am nevoie din request la urmatorul middleware

logout: distroy the cookie -> res.cookie('jwt', '', {maxAge: 0})


nu poti sa-ti dai follow/unfollow singur

a facut un mongoose model si pentru notification care deocamdata are doar doua tipuri: enum: ['follow', 'like']

in suggested bar nu ai cum sa apari si tu

const users = await User.aggregate([
      {
        $match: {
          _id: { $ne: userId }, (ne = not equal)
        },
      },
      { $sample: { size: 10 } },
    ]);


      REACT

la pagina la signUp a folosit 2 logouri pt a pastra pagina responsive pt dispozitive

pt lg:flex
logo si form

pt lg:hidden
logo in form 


Sidebar and RightPanel will be used in every page so we keep them out of Routes


RightPanel cand isLoading voi pune un skeleton adica o masca pt a nu arata ca nu am deja datele necesare si pt asta voi face in components/skeletons/RightPanelSkeleton.jsx o matrita care se pliaza perfect cu produsul final si care va avea niste efecte de LOADing

Upload a POST
icon, input (type='file', hidden, ref={imgRef})
icon -> imgRef.current.click(); ==> 
input.onChange() => handleClicked(e) ==>
file = e.target.files[0]
  if (file) ->
    reader = new fileReader
    reader.onload() -> setImg(file)
    convert to base64 with reader.readAsDataURL(file)

if (img)
  x icon - onClick => setImg(null), imgRef.current.value = null


Posts
  //1) is Loading -> skeleton
  //2) there are no Posts -> message
  //3) display the Posts

React Query - cum pot folosi aceleasi date intre componente diferite?
  const {data} = useQuery({queryKey: ['authUser'], queryFn: fetchAuthUserAPI})
  dupa ce au fost luate datele din Api ele vor fi stocate in React Query cache si le pot accesa astfel:
  const {data} = useQuery({queryKey: ['authUser']})
  si bam am luat datele colectate fara un new request to api

  refetch vs invalidateQueries
    refetch = now
    invalidateQueries -> spune lui React Query ca query-ul cu queryKey:     a expirat, asadar data viitoare cand vrea sa-l foloseasca va trebui sa-i dea refetch.

Create Posts
  cand ai img el merge la server cu base64 string-ul tau si de acolo il pune in cloudinary si dupa il salveaza in Db ca link la cloudinary

Custom hook pt FollowUnfollow


toast.success("liked");
      // bad UX it refetch all the posts
      // queryClient.invalidateQueries({ queryKey: ["posts"] });
      // instead update the cache directly for that post
      // deci daca noi vrem sa dam update la post fiind ca am modificat likes-urile asta ar insemna ca trebuie sa marcam toate post-urile 'posts' ca fiind expirate doar din cauza unuia ceea ce va face un bad UX ( user experience ). Cand MainPage-ul meu va vedea ca 'posts' sunt marcate ca expirate va da re-fetch la server si o sa-si ia toate update. Ca sa nu se intample chestia asta, vom modifica noi in liniste informatiile (pe care le foloseste React-ul) din query 'posts' pt post-ul care ne intereseaza:
        queryClient.setQueryData(['posts'], (oldData) => ...(map + if)...)

if isCommenting / isLiking etc. -> return


noi cand modificam ceva in Db trebuie sa o aducem si in frontend. Asta se poate face prin fetch the data through the server with reqests. Dar daca eu vreau sa modific doar ceva minor la un post, inseamna ca trebuie sa dau refetch la toate post-urile, tinand cont ca eu le am stocate in cache-ul de la React Query? NU. 
  Cand schimb ceva
    schimbi in DB
    dai fetch la new Data (request) -> in query's cache
    frontend ia din cache datele
  Cand dau request el de fapt ia response-ul si il baga in cache
  Eu pot proceda si astfel: 
    schimbi in DB -> response = new data
    NU dai fetch ci schimbi manual in query's cache
    frontend ia din cache
  exact acelasi rezultat il voi avea, dar nu o sa am lag din cauza a prea multe request-uri
  queryClient.setQueryData(["posts"], (oldData) => {})

@route /api/users/:username
   data from my server
   am facut un query nou care stocheaza in cache informatii profilul la care ma uit in momentul asta: al meu sau al alt cuiva
   queryKey: userProfile
   cand merg la alt profil eu trebuie sa dau alt request catre server + update UI
   cum aflu cand se schimba profilul la care ma uit? 
    eu iau {username} = useParams(); [ (url)/profile/:username ];
    si vreau sa vad cand se modifica username asa a voi avea un UseEffect cu ['username']
      in el vreau sa dau refetch la data asa ca queryFn de unde ii dau fetch trebuie facuta din nou: {refetch} = useQuery(queryFn:...)
      deci o sa ai
        const {username} = useParams();
        const {..., refetch, isRefetching} = useQuery(...)
        useEffect(()=>{ refetch() }, ['username']) 
  
Posts - feedType
useEffect() cu feedType dar si cu username 
  keep the profile and his data in sync

mutateAsync cand dau update la img
  await fn
  set the imgs to null